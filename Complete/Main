#!/bin/bash
echo "Script start!"
echo "Script by JasperTecHK, find it on my github!"
#exec 2>/dev/null #this has been deprecated. There shouldn't be any errors to garbage-ify.
        # Defining all the Variables
		Init="1" #Used for initialization loop confirmation
	        errorinput="Error, Error! Invalid choice, dummy!" #ErrorMessage
		inputnochk='^[0-9]+$'	#NumberFilter
		rechoice="Fine, returning to start!"	#Reload
		url="https://danbooru.donmai.us/counts/posts?tags=" #Used as a template. After all, this is Danbooru counting. where else would you find this specific scenario?
		namelocate="" #where the results are stored, in Csv form.
		nametxt="" #checks if previous file exists
		conf="N"
		choice=$1

		# Defining all the Functions
		Dirscan () {
		while [[ $Init -ne "0" ]] #here, this loop checks which url group to read.
			do
				echo "Which list do you want to scour?"
				cat Options
				conf="N"
				read sel
				OptionsMenu
			done
		}

		OptionsMenu () {
		if [[ $sel = "0" ]]; then
				echo "Who do you want to search for?"
				read sel
				echo $sel | sed -e 's/,\s\+/,/g' | tr " " "_"  |tr "," "\n" |tr -d "^ " >> $PWD/url/customurl
				truncate -s -1 $PWD/url/customurl
				customcheck="1"
				list="customurl"
				end=""
				nametxt="Custom.csv"
				call="Custom"
        	elif [[ $sel = "1" ]] || [[ $choice = "kantaiurl" ]]; then 	#change these as required. example given in selectiontemplate.
				list="kantaiurl"				#name of file to grab
				end="(kantai_collection)"			#url-ender
				nametxt="Kantai.csv"				#name of file to save to
				call="Kantai Collection"			#confirmation message above
        	elif [[ $sel = "2" ]] || [[ $choice = "azurlaneurl" ]]; then
				list="azurlaneurl"
				end="(azur_lane)"
				nametxt="Azur.csv"
				call="Azur Lane"
		elif [[ $sel = "3" ]] || [[ $choice = "touhouurl" ]]; then
				list="touhouurl"
				end=""
				nametxt="Touhou.csv"
				call="Touhou"
            	elif [[ $sel = "4" ]] || [[ $choice = "overwatchurl" ]]; then
				list="overwatchurl"
				end="(overwatch)"
				nametxt="Overwatch.csv"
				call="Overwatch"
		elif [[ $sel = "5" ]] || [[ $choice = "honkaiurl" ]]; then
				list="honkaiurl"
				end=""
				nametxt="Honkai.csv"
				call="Honkai Impact"
		elif [[ $sel = "6" ]] || [[ $choice = "RWBYurl" ]]; then
				list="RWBYurl"
				end=""
				nametxt="RWBY.csv"
				call="RWBY"
		elif [[ $sel = "7" ]] || [[ $choice = "vocaloidurl" ]]; then
				list="vocaloidurl"
				end=""
				nametxt="vocaloid.csv"
				call="Vocaloid and Voiceroids"
		elif [[ $sel = "8" ]] || [[ $choice = "hololiveurl" ]]; then
				list="hololiveurl"
				end=""
				nametxt="hololive.csv"
				call="Hololive"
                elif ! [[ $sel =~ $inputnochk ]]; then
				echo $errorinput
		else
				echo "Wait. That isn't set up yet."
            	fi
			finalchk
		}

		finalchk () {
		while ! [[ $conf = "Y" ]]
			do
				echo "You have selected $call, correct? Y/N"
				read -sn 1 sel
			if [[ $sel =~ $inputnochk ]]; then
				echo $errorinput
			elif [[ $sel = *"Y"* ]] || [[ $sel = *"y"* ]]; then
				conf="Y"
				Init="0"
				echo "Confirmed"
			elif [[ $sel = *"N"* ]] || [[ $sel = *"n"* ]]; then
				echo $rechoice
				conf="Y"
			else
				echo $errorinput
			fi
		done
			if [[ $sel = "0" ]]; then
				Dirscan
			fi
			} #Final verification of choice on list scraping.

		EnvCheck () {
			if [[ ! -d Csv ]]; then
				mkdir Csv
			fi
				nametxt="Csv/$nametxt"
			if [[ -f $nametxt ]]; then
				rm $nametxt
			fi
		}	#Environment Check

		Passthrough () {
		list="url/$list"
		count=$(wc -l < "$list")
		export count
		export list
		export end
		export nametxt
		export url
		}	#Passthrough Vars to sub-script

		#Begin Script
		if [[ -f nameerrors ]]; then
			rm nameerrors
		fi
		if [[ -z $1 ]]; then					#If Opt 1 is empty, ask.
			Dirscan
		elif [[ $1 =~ $inputnochk ]]; then			#else if Opt1 is a number, check number
			$sel=$1
			OptionsMenu
		elif [[ ! -f url/$choice ]]; then			#else, if url requested is nonexistant, goto inquire.
			echo -ne "Invalid file chosen. Restarting."\\r
			echo""
			sleep 2
			choice=""
			Dirscan
		else
			OptionsMenu					#else, connect to file affirmation.
		fi

		EnvCheck
		Passthrough
	if [[ -x "$(command -v parallel)" ]]; then
		./DanParallel
	else
		./DanNoParallel
	fi
	if [[ $customcheck = "1" ]]; then
	rm $PWD/url/customurl
	fi
exit
